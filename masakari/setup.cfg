[metadata]
name = masakari
summary = Virtual Machine High Availability (VMHA) service for OpenStack
description-file =
    README.rst
author = OpenStack
author-email = openstack-dev@lists.openstack.org
home-page = https://docs.openstack.org/masakari/latest/
classifier =
    Environment :: OpenStack
    Intended Audience :: Information Technology
    Intended Audience :: System Administrators
    License :: OSI Approved :: Apache Software License
    Operating System :: POSIX :: Linux
    Programming Language :: Python
    Programming Language :: Python :: 2
    Programming Language :: Python :: 2.7
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.5

[files]
data_files =
    etc/masakari =
        etc/masakari/api-paste.ini
        etc/masakari/masakari-custom-recovery-methods.conf
packages =
    masakari

[entry_points]
oslo.config.opts =
    masakari.conf = masakari.conf.opts:list_opts
    customized_recovery_flow_opts = masakari.conf.opts:list_recovery_workflow_opts

oslo.config.opts.defaults =
    masakari.api = masakari.common.config:set_middleware_defaults

oslo.policy.enforcer =
    masakari = masakari.policy:get_enforcer

oslo.policy.policies =
    # The sample policies will be ordered by entry point and then by list
    # returned from that entry point. If more control is desired split out each
    # list_rules method into a separate entry point rather than using the
    # aggregate method.
    masakari = masakari.policies:list_rules

console_scripts =
    masakari-api = masakari.cmd.api:main
    masakari-engine = masakari.cmd.engine:main
    masakari-manage = masakari.cmd.manage:main

wsgi_scripts =
    masakari-wsgi = masakari.cmd.api:initialize_application

masakari.database.migration_backend =
    sqlalchemy = oslo_db.sqlalchemy.migration

masakari.api.v1.extensions =
    versions = masakari.api.openstack.ha.versionsV1:Versions
    extension_info = masakari.api.openstack.ha.extension_info:ExtensionInfo
    segments = masakari.api.openstack.ha.segments:Segments
    hosts = masakari.api.openstack.ha.hosts:Hosts
    notifications = masakari.api.openstack.ha.notifications:Notifications

masakari.driver =
    taskflow_driver = masakari.engine.drivers.taskflow:TaskFlowDriver

masakari.task_flow.tasks =
    disable_compute_service_task = masakari.engine.drivers.taskflow.host_failure:DisableComputeServiceTask
    prepare_HA_enabled_instances_task = masakari.engine.drivers.taskflow.host_failure:PrepareHAEnabledInstancesTask
    evacuate_instances_task = masakari.engine.drivers.taskflow.host_failure:EvacuateInstancesTask
    stop_instance_task = masakari.engine.drivers.taskflow.instance_failure:StopInstanceTask
    start_instance_task = masakari.engine.drivers.taskflow.instance_failure:StartInstanceTask
    confirm_instance_active_task = masakari.engine.drivers.taskflow.instance_failure:ConfirmInstanceActiveTask
    disable_compute_node_task = masakari.engine.drivers.taskflow.process_failure:DisableComputeNodeTask
    confirm_compute_node_disabled_task = masakari.engine.drivers.taskflow.process_failure:ConfirmComputeNodeDisabledTask
    no_op = masakari.engine.drivers.taskflow.no_op:Noop

[build_sphinx]
source-dir = doc/source
build-dir = doc/build
all_files = 1

[upload_sphinx]
upload-dir = doc/build/html

[compile_catalog]
directory = masakari/locale
domain = masakari

[update_catalog]
domain = masakari
output_dir = masakari/locale
input_file = masakari/locale/masakari.pot

[extract_messages]
keywords = _ gettext ngettext l_ lazy_gettext
mapping_file = babel.cfg
output_file = masakari/locale/masakari.pot

[build_releasenotes]
all_files = 1
build-dir = releasenotes/build
source-dir = releasenotes/source
